{% comment %}
// vim: set syntax=asm :
/* mmm 40 x 5:

    ymm0 ymm5
    ymm1 ymm6
    ymm2 ymm7
    ymm3 ymm8
	ymm4 ymm9

System V ABI:
    args: rdi, rsi, rdx, rcx, r8, r9
    preserve: rbx, rsp, rbp, r12, r13, r14, r15
    scratch: rax, rdi, rsi, rdx, rcx, r8, r9, r10, r11
    return: rax (+rdx)

Windows ABI:
    args: RCX, RDX, R8, R9
    preserve: RBX, RBP, RDI, RSI, RSP, R12, R13, R14, R15, and XMM6-15
    scratch: RAX, RCX, RDX, R8, R9, R10, R11, XMM0-5, and the upper portions of YMM0-15 and ZMM0-15
    return: rax (+rdx)
*/
{% endcomment %}

{% include "preamble.tmpliq" size:"40x2", suffix:suffix, G:G %}

{{L}}clear:
    vzeroall
    jmp     {{L}}non_linear_loop

{{L}}add_mat_mul:
    mov     rcx,    [rdi + 24]   // B
    mov     rax,    [rdi + 16]   // A

    mov     rbx,    [rdi + 8]    // k
    test    rbx,    rbx
    jz      {{L}}non_linear_loop

{{L}}main_loop_packed_packed:
	{% include "5x2/packed_packed_loop1/avx.tmpli" %}

    add             rcx,    20
    add             rax,    64
    dec             rbx
    jnz             {{L}}main_loop_packed_packed

    jmp             {{L}}non_linear_loop

// NON LINEAR / ADDC

{% include "fma_mmm_f32_scalars.tmpliq" from:0, to:11 %}
{% include "fma_mmm_f32_per_rows.tmpliq" mr:32, from:0, to:11 %}
{% include "fma_mmm_f32_per_cols.tmpliq" mr:32, from:0, to:11 %}

{{L}}add_unicast:

    mov     r10,    [rdi + 8]           // c ptr
    mov     rsi,    [rdi + 16]          // row stride
    mov     rbx,    [rdi + 24]          // col stride

	// TODO

    jmp    {{L}}non_linear_loop

	// TODO

{{L}}add_row_col_products:
    mov             rax, [ rdi + 8 ]
    mov             rbx, [ rdi + 16 ]

	vbroadcastss    ymm13, dword ptr [rbx]
	vbroadcastss    ymm14, dword ptr [rbx + 4]
	vbroadcastss    ymm15, dword ptr [rbx + 8]
{% for i in (0..3) %}
    vmovups         ymm12,  [rax + {{i|times:32}}]
    vfmadd231ps     ymm{{0|plus:i}}, ymm12, ymm13
    vfmadd231ps     ymm{{4|plus:i}}, ymm12, ymm14
	vfmadd231ps     ymm{{8|plus:i}}, ymm12, ymm15
{% endfor %}
    jmp    {{L}}non_linear_loop

{{L}}store:
    mov     r8,     [rdi + 8]           // c ptr
    mov     rsi,    [rdi + 16]          // row stride
    mov     rbx,    [rdi + 24]          // col stride

    lea     r9,     [ r8 + rbx ]
    lea     r10,    [ r8 + 2 * rbx ]

    cmp         rsi, 64
    jne         {{L}}store_strides_generic

	{% for row in (0..3) %}
		{% for col in (0..2) %}
			vmovups ymmword ptr [r{{col|plus:8}}], ymm{{col|times:4|plus:row}}
			add r{{col|plus:8}}, rsi
	   {% endfor %}
	{% endfor %}

	jmp     {{L}}non_linear_loop

{{L}}store_strides_generic:

	// TODO

    jmp     {{L}}non_linear_loop

{% include "postamble.tmpliq" size:"40x2", suffix:suffix, G:G, L:L %}
